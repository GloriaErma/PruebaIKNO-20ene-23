package com.ikno.microservicio.Controllers;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.ikno.microservicio.Services.ArchivoService;

import java.io.*;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.json.JSONException;
import org.json.simple.*;

@RestController
@RequestMapping(path = "api", produces = "aplicacion/json")
public class ArchivoRest {

    @Autowired
    private ArchivoService service;

    @GetMapping("/hola")
    ResponseEntity<String> holaMundo() {
        return ResponseEntity.ok().body("Hola Mundo desde una respuesta HTTP!");
    }

    @PostMapping("leer")
    // public ResponseEntity<String> lec(@RequestBody String archivo) {
    // // public String LeerArchivo( @RequestBody String archivo) {
    // return service.lectura(archivo);
    // }

    public ResponseEntity<String> lectura(@RequestBody File archivo) {
        // File archivo = new File("configuracion.json");
        System.out.println("**************GECS** leer***crear ODT*******************");
        if (!archivo.exists()) {
            // return new ResponseEntity<>("¡¡No existe el archivo de configuración!!",
            // HttpStatus.BAD_REQUEST);
            // return ResponseEntity.badRequest().body("Error! No existe el archivo de
            // configuración");
            System.out.println(archivo.getParent()); // Fj.json
            System.out.println(archivo.length()); // application/json
            System.out.println(archivo.getName()); // file
            System.out.println(archivo.getAbsolutePath()); // 144
            System.out.println(archivo.toString()); // org.springframework.web.multipart.support.StandardMultipartHttpServletRequest$StandardMultipartFile@23a25a08

            return ResponseEntity.ok().body(archivo.list() + "RTA: Hola Mundo desde una respuesta HTTP!");
        }
        return service.lectura(archivo);
    }

    @PostMapping("/cargar")
    public ResponseEntity<?> carga(@RequestParam("Archivo") MultipartFile archivo) throws JSONException {
        System.out.println("**************GECS** REST* cargar**********************");
        System.out.println(archivo.getOriginalFilename()); // Fj.json
        System.out.println(archivo.getContentType()); // application/json
        System.out.println(archivo.getName()); // file
        System.out.println(archivo.getSize()); // 144
        System.out.println(archivo.toString()); // org.springframework.web.multipart.support.StandardMultipartHttpServletRequest$StandardMultipartFile@23a25a08
        if (null == archivo.getOriginalFilename() || archivo.isEmpty()) {
            return ResponseEntity.badRequest().body("Error! No se encontro el archivo");
        }
        service.save(archivo);

        List<String> list = new ArrayList<>();
        for (String i : service.save(archivo)) {
            System.out.println(i);
            list.add(i);
        }
        // JSONObject resp = new JSONObject();
        // resp.put("status", 0);
        // resp.put("mensaje", "Transacción exitosa!!!");
        // resp.put("Archivos", list);

        HashMap<String, Object> detalle = new HashMap<String, Object>();
        detalle.put("3-Archivos", list);
        detalle.put("1-status", 0);
        detalle.put("2-mensaje", "Transacción exitosa!!!");
        
        detalle.entrySet().stream().sorted(Map.Entry.comparingByKey());

        JSONObject resp = new JSONObject(detalle);

        return new ResponseEntity<String>(resp.toString(), HttpStatus.CREATED);

        // return ResponseEntity.ok().body("RTA: Transacción exitosa!!! "
        // +archivo.getName()+ ": "+archivo.getOriginalFilename() +" encontrado." +
        // Arrays.toString(service.save(archivo)) );
        // RTA: Transacción exitosa!!! Archivo: B103078.json
        // encontrado.[salidas//1-DEPOSIT SLIP-table17.51.55 22-01-2023.csv,
        // salidas//2-DEPOSIT SLIP-table17.51.55 22-01-2023.csv, salidas//3-DEPOSIT
        // SLIP-table17.51.55 22-01-2023.csv, salidas//4-DEPOSIT SLIP-table17.51.55
        // 22-01-2023.csv, salidas//5-DEPOSIT SLIP-table17.51.55 22-01-2023.csv,
        // salidas//6-DEPOSIT SLIP-table17.51.55 22-01-2023.csv, salidas//7-DEPOSIT
        // SLIP-table17.51.56 22-01-2023.csv, salidas//8-DEPOSIT SLIP-table17.51.56
        // 22-01-2023.csv]
        // return new ResponseEntity<>("Good Job", HttpStatus.OK);

        // return ResponseEntity.ok().body("RTA: Transacción exitosa!!! "
        // +archivo.getName()+ ": "+archivo.getOriginalFilename() +" encontrado."+
        // Arrays.toString(service.save(archivo)) );

    }

}
