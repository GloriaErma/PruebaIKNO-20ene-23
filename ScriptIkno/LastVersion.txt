
*********************************************

<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>3.0.1</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>
	<groupId>com.ikno</groupId>
	<artifactId>microservicio</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<name>microservicio</name>
	<description>Demo project for Spring Boot</description>
	<properties>
		<java.version>17</java.version>
	</properties>
	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-devtools</artifactId>
			<scope>runtime</scope>
			<optional>true</optional>
		</dependency>
		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
			<optional>true</optional>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
		<!-- adicion GECS -->
		<dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-jpa</artifactId>
        </dependency>
        <dependency>
            <groupId>com.h2database</groupId>
            <artifactId>h2</artifactId>
        </dependency>
		<!-- https://mvnrepository.com/artifact/com.googlecode.json-simple/json-simple -->
		<dependency>
			<groupId>com.googlecode.json-simple</groupId>
			<artifactId>json-simple</artifactId>
			<version>1.1.1</version>
		</dependency>
		<!-- https://mvnrepository.com/artifact/org.json/json -->
		<dependency>
			<groupId>org.json</groupId>
			<artifactId>json</artifactId>
			<version>20220924</version>
		</dependency>

	</dependencies>

	<build>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
				<configuration>
					<excludes>
						<exclude>
							<groupId>org.projectlombok</groupId>
							<artifactId>lombok</artifactId>
						</exclude>
					</excludes>
				</configuration>
			</plugin>
		</plugins>
	</build>

</project>

*********************************************
package com.ikno.microservicio.Controllers;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;
import com.ikno.microservicio.Services.ArchivoService;
import java.io.*;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.json.simple.*;

@RestController
@RequestMapping(path = "api", produces = "aplicacion/json")
public class ArchivoRest {

    @Autowired
    private ArchivoService service;

    @GetMapping("/hola")
    ResponseEntity<String> holaMundo() {
        return ResponseEntity.ok().body("Hola Mundo desde una respuesta HTTP!");
    }

    public ResponseEntity<String> lectura(@RequestBody File archivo) {
        // File archivo = new File("configuracion.json");
        if (!archivo.exists()) {
            // return new ResponseEntity<>("¡¡No existe el archivo de configuración!!",
            // HttpStatus.BAD_REQUEST);
            // return ResponseEntity.badRequest().body("Error! No existe el archivo de
            // configuración");
            System.out.println(archivo.getParent()); // Fj.json
            System.out.println(archivo.length()); // application/json
            System.out.println(archivo.getName()); // file
            System.out.println(archivo.getAbsolutePath()); // 144
            System.out.println(archivo.toString()); // org.springframework.web.multipart.support.StandardMultipartHttpServletRequest$StandardMultipartFile@23a25a08

            return ResponseEntity.ok().body(archivo.list() + "RTA: Hola Mundo desde una respuesta HTTP!");
        }
        return service.lectura(archivo);
    }

    @PostMapping("/cargar")
    public ResponseEntity<?> carga(@RequestParam("Archivo") MultipartFile archivo) {
        String msg = " ";
        int status = 0;
        List<String> list = new ArrayList<>();
        
        if (null == archivo.getOriginalFilename() || archivo.isEmpty() || archivo.getSize() == 0) {
            msg = "Error! " + archivo.getName() + ": " + archivo.getOriginalFilename()
                    + ".  Esta vacio NO se puede para cargar!!!";
            status = 111;
        } else {
            String[] arrCarga = service.save(archivo);
            if (arrCarga != null) {
                for (String i : arrCarga) {
                    if (i == null) {
                        msg = "Error! " + archivo.getName() + ": " + archivo.getOriginalFilename()
                                + ".  Esta cargado!!! Pero NO se puede procesar.";
                        status = 333;
                    }
                    System.out.println(i);
                    list.add(i);
                }
            } else {
                msg = "Error! " + archivo.getName() + ": " + archivo.getOriginalFilename()
                        + ".  Esta cargado!!! Pero NO se puede procesar.";
                status = 222;
            }
        }

        if (msg==" " ) {
            msg = "Transacción exitosa!!!";
        }
        Date toDAY = new Date();
        DateFormat hourdateFormat = new SimpleDateFormat("dd-MM-yyyy HH:mm:ss");
        String fecha = hourdateFormat.format(toDAY);
        HashMap<String, Object> detalle = new HashMap<String, Object>();
        detalle.put("Codigo Estado", status);
        detalle.put("Mensaje", msg);
        detalle.put("Resultado", list);
        detalle.put("Fecha", fecha);
        detalle.entrySet().stream().sorted(Map.Entry.comparingByKey());

        JSONObject resp = new JSONObject(detalle);

        return new ResponseEntity<String>(resp.toString(), HttpStatus.CREATED);

    }

}

========================================

package com.ikno.microservicio.Services;

import java.io.*;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.text.DateFormat;
import java.text.SimpleDateFormat;

import java.util.Date;
import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.json.simple.parser.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;

@Service
public class ArchivoService {

    public ResponseEntity<String> lectura(File archivo) {
        try {
            // return ResponseEntity.ok().body(image);
            // return new ResponseEntity<>(archivo+"RTA: Hola Mundo desde una respuesta
            // HTTP!", HttpStatus.OK);
            return ResponseEntity.ok().body(archivo + "RTA: Hola Mundo desde una respuesta HTTP!");
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }
    }

    private String folder = "cargas//";
    private static String folderSal = "salidas//";
    private final Logger logg = LoggerFactory.getLogger(ArchivoService.class);

    public String[] save(MultipartFile file) {
        String[] arrDocumentSave = new String[8];
        if (!file.isEmpty()) {
            try {
                byte[] bytes = file.getBytes();
                Path path = Paths.get(folder + file.getOriginalFilename()); // folder+file
                Files.write(path, bytes);
                logg.info("LOG:: Archivo guardado");
                String nombreArhivo = folder + path.getFileName();
                arrDocumentSave = leerArchivo(nombreArhivo);
            } catch (IOException e) {
                System.out.println(e.getMessage());
                e.printStackTrace();

            }
        } else {
            return null;
        }
        return arrDocumentSave;
    }

    public static String[] leerArchivo(String arch) {
        File archivo = null;
        FileWriter fichero = null;
        PrintWriter pw = null;
        String[] arrDocument = new String[8];

        try {
            // Apertura del fichero y creacion de BufferedReader para poder
            // hacer una lectura comoda (disponer del metodo readLine()).
            // archivo = new File("cargas\\Fj.json");
            archivo = new File(arch);
            int cont = 0;
            int tipo = 0;
            String[] arrCampos = new String[7];
            String linea;

            JSONParser parser = new JSONParser();
            try {
                Object ob = parser.parse(new FileReader(archivo));

                cont++;
                JSONObject js = (JSONObject) ob;
                JSONArray arrObject = (JSONArray) js.get("documents");

                for (int i = 0; i < arrObject.size(); i++) {
                    if (tipo == 0) {
                        Date toDAY = new Date();
                        DateFormat hourdateFormat = new SimpleDateFormat("dd-MM-yyyy HH.mm.ss");
                        String historial = hourdateFormat.format(toDAY);

                        String archSalida = folderSal + (i + 1) + "-DEPOSIT SLIP-table " + historial + ".csv";
                        arrDocument[i] = archSalida;

                        fichero = new FileWriter(archSalida);
                        pw = new PrintWriter(fichero);
                        salida(0, arrCampos, pw);
                        tipo = 1;
                    }
                    JSONObject objDoc = (JSONObject) arrObject.get(i);
                    String docId = objDoc.get("docId").toString(); // OK
                    JSONObject jsonTable = (JSONObject) objDoc.get("table");

                    JSONArray jsonTableRows = (JSONArray) jsonTable.get("tableRows");

                    // Obtiene elementos de array "Rows".
                    for (int j = 0; j < jsonTableRows.size(); j++) {
                        JSONObject objRows = (JSONObject) jsonTableRows.get(j);
                        JSONArray jsonColumnFields = (JSONArray) objRows.get("columnFields");

                        for (int k = 0; k < jsonColumnFields.size(); k++) {
                            JSONObject objColumn = (JSONObject) jsonColumnFields.get(k);
                            switch (objColumn.get("key").toString()) {
                                case "Date":
                                    arrCampos[0] = (String) objColumn.get("value");
                                    break;
                                case "BT":
                                    arrCampos[1] = (String) objColumn.get("value");
                                    break;
                                case "Prov":
                                    arrCampos[2] = (String) objColumn.get("value");
                                    break;
                                case "Name":
                                    arrCampos[3] = (String) objColumn.get("value");
                                    break;
                                case "Bank":
                                    arrCampos[4] = (String) objColumn.get("value");
                                    break;
                                case "Check#":
                                    arrCampos[5] = (String) objColumn.get("value");
                                    break;
                                case "Amount":
                                    arrCampos[6] = (String) objColumn.get("value");
                                    break;
                                default:
                                    break;
                            }
                        }
                        salida(tipo, arrCampos, pw);
                    }
                    tipo = 0;
                    if (null != fichero)
                        fichero.close();
                }

                System.out.println(" *** FIN *** " + cont); 
            } catch (Exception e) {
                System.out.println("Error controlado en controler rest" + archivo.getClass().getSimpleName() + archivo.length());
            }

        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            // En el finally cerramos el fichero, para asegurarnos
            // que se cierra tanto si todo va bien como si salta
            // una excepcion.
            try {
                if (null != fichero)
                    fichero.close();
            } catch (Exception e2) {
                e2.printStackTrace();
            }
        }
        return arrDocument;
    }

    public static void salida(int tipo, String[] arrCampos, PrintWriter pw) {
        String lineaSal = "";
        try {
            if (tipo == 0) {
                pw.println("Date,\"BT\",\"Prov\",\"Name\",\"Bank\",\"Check\",\"Amount\" ");
            } else {
                for (int i = 0; i < arrCampos.length; i++) {
                    lineaSal = lineaSal + "\"" + arrCampos[i] + "\"" + ",";
                }
                pw.println(lineaSal);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}

==================================================================

spring.servlet.multipart.max-file-size=50MB
spring.servlet.multipart.max-request-size=50MB
server.tomcat.max-swallow-size=-1

==================================================================


===============================